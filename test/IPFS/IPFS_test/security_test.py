#!/usr/bin/env python3
"""
Data Integrity Hy√∂kk√§ystestiskripti
Testaa kuinka j√§rjestelm√§ reagoi luvattomiin muutoksiin
"""

import json
import os
import random
import hashlib
import subprocess
from datetime import datetime
import time

class SecurityTester:
    def __init__(self, data_dir='data'):
        self.data_dir = data_dir
        self.test_results = []
        
    def log_test(self, test_name, success, message, details=None):
        """Kirjaa testin tuloksen"""
        result = {
            'test': test_name,
            'success': success,
            'message': message,
            'timestamp': datetime.now().isoformat(),
            'details': details
        }
        self.test_results.append(result)
        
        icon = "‚úÖ" if success else "‚ùå"
        print(f"{icon} {test_name}: {message}")
        if details:
            print(f"   üìù {details}")
        print()
    
    def test_1_direct_file_modification(self):
        """Testaa suoraa tiedostomuutosta"""
        print("üîì TESTI 1: Suora tiedostomuutos (questions.json)")
        
        try:
            # 1. Lue alkuper√§inen tiedosto
            filepath = os.path.join(self.data_dir, 'questions.json')
            with open(filepath, 'r', encoding='utf-8') as f:
                original_data = json.load(f)
            
            # 2. Tee luvaton muutos
            modified_data = original_data.copy()
            if 'questions' in modified_data and len(modified_data['questions']) > 0:
                # Muuta ensimm√§isen kysymyksen teksti√§
                original_question = modified_data['questions'][0]['question']['fi']
                modified_data['questions'][0]['question']['fi'] = "üö® MUOKATTU: " + original_question
                
                # Kirjoita muokattu tiedosto
                with open(filepath, 'w', encoding='utf-8') as f:
                    json.dump(modified_data, f, indent=2, ensure_ascii=False)
                
                # 3. Odota ja tarkista havaitaanko muutos
                time.sleep(2)
                
                # 4. Tarkista API:n kautta integrity status
                import requests
                try:
                    response = requests.get('http://localhost:5000/api/data/verify', timeout=10)
                    if response.status_code == 200:
                        result = response.json()
                        issues_found = result.get('integrity_check', {}).get('issues_found', 0)
                        
                        if issues_found > 0:
                            self.log_test(
                                "Suora tiedostomuutos", 
                                True, 
                                "Muutos havaittu onnistuneesti", 
                                f"L√∂ydetty {issues_found} ongelmaa"
                            )
                        else:
                            self.log_test(
                                "Suora tiedostomuutos", 
                                False, 
                                "Muutos EI havaittu", 
                                "Data integrity j√§rjestelm√§ ei toimi odotetusti"
                            )
                    else:
                        self.log_test(
                            "Suora tiedostomuutos", 
                            False, 
                            "API-virhe", 
                            f"Status code: {response.status_code}"
                        )
                except Exception as e:
                    self.log_test(
                        "Suora tiedostomuutos", 
                        False, 
                        "Verkkovirhe", 
                        str(e)
                    )
                
                # 5. Palauta alkuper√§inen tiedosto
                with open(filepath, 'w', encoding='utf-8') as f:
                    json.dump(original_data, f, indent=2, ensure_ascii=False)
                    
            else:
                self.log_test(
                    "Suora tiedostomuutos", 
                    False, 
                    "Testi ep√§onnistui", 
                    "Ei kysymyksi√§ saatavilla"
                )
                
        except Exception as e:
            self.log_test(
                "Suora tiedostomuutos", 
                False, 
                "Testi ep√§onnistui", 
                str(e)
            )
    
    def test_2_corrupt_json_file(self):
        """Testaa korruptoituneen JSON-tiedoston havaitsemista"""
        print("üîì TESTI 2: Korruptoitunut JSON-tiedosto")
        
        try:
            filepath = os.path.join(self.data_dir, 'candidates.json')
            
            # 1. Lue alkuper√§inen
            with open(filepath, 'r', encoding='utf-8') as f:
                original_content = f.read()
            
            # 2. Korruptoi tiedosto (poista sulkeva aaltosulje)
            corrupted_content = original_content.rstrip()[:-1]  # Poista viimeinen }
            
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(corrupted_content)
            
            # 3. Tarkista havaitaanko korruptio
            time.sleep(2)
            
            import requests
            response = requests.get('http://localhost:5000/api/data/verify', timeout=10)
            if response.status_code == 200:
                result = response.json()
                issues = result.get('integrity_check', {}).get('issues', [])
                
                json_errors = [issue for issue in issues if 'JSON' in issue or 'corrupt' in issue.lower()]
                
                if json_errors:
                    self.log_test(
                        "Korruptoitunut JSON", 
                        True, 
                        "Korruptio havaittu", 
                        f"L√∂ydetty: {json_errors[0]}"
                    )
                else:
                    self.log_test(
                        "Korruptoitunut JSON", 
                        False, 
                        "Korruptio EI havaittu", 
                        "JSON-virhe ei havaittu integrity-tarkistuksessa"
                    )
            else:
                self.log_test(
                    "Korruptoitunut JSON", 
                    False, 
                    "API-virhe", 
                    f"Status code: {response.status_code}"
                )
            
            # 4. Palauta alkuper√§inen
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(original_content)
                
        except Exception as e:
            self.log_test(
                "Korruptoitunut JSON", 
                False, 
                "Testi ep√§onnistui", 
                str(e)
            )
    
    def test_3_missing_file(self):
        """Testaa puuttuvan tiedoston havaitsemista"""
        print("üîì TESTI 3: Puuttuva tiedosto")
        
        try:
            filepath = os.path.join(self.data_dir, 'newquestions.json')
            backup_path = filepath + '.backup'
            
            # 1. Siirr√§ tiedosto v√§liaikaisesti
            if os.path.exists(filepath):
                os.rename(filepath, backup_path)
                
                # 2. Tarkista havaitaanko puuttuva tiedosto
                time.sleep(2)
                
                import requests
                response = requests.get('http://localhost:5000/api/data/verify', timeout=10)
                if response.status_code == 200:
                    result = response.json()
                    issues = result.get('integrity_check', {}).get('issues', [])
                    
                    missing_errors = [issue for issue in issues if 'puuttuu' in issue.lower() or 'missing' in issue.lower()]
                    
                    if missing_errors:
                        self.log_test(
                            "Puuttuva tiedosto", 
                            True, 
                            "Puuttuva tiedosto havaittu", 
                            f"L√∂ydetty: {missing_errors[0]}"
                        )
                    else:
                        self.log_test(
                            "Puuttuva tiedosto", 
                            False, 
                            "Puuttuva tiedosto EI havaittu", 
                            "Tiedoston puuttuminen ei havaittu"
                        )
                else:
                    self.log_test(
                        "Puuttuva tiedosto", 
                        False, 
                        "API-virhe", 
                        f"Status code: {response.status_code}"
                    )
                
                # 3. Palauta tiedosto
                os.rename(backup_path, filepath)
            else:
                self.log_test(
                    "Puuttuva tiedosto", 
                    False, 
                    "Testi ep√§onnistui", 
                    "Tiedostoa ei l√∂ydy"
                )
                
        except Exception as e:
            self.log_test(
                "Puuttuva tiedosto", 
                False, 
                "Testi ep√§onnistui", 
                str(e)
            )
    
    def test_4_hash_tampering(self):
        """Testaa hash-manipulaation havaitsemista"""
        print("üîì TESTI 4: Hash-manipulaatio (meta.json)")
        
        try:
            filepath = os.path.join(self.data_dir, 'meta.json')
            
            # 1. Lue ja muokkaa meta.json hashia
            with open(filepath, 'r', encoding='utf-8') as f:
                meta_data = json.load(f)
            
            original_hash = meta_data.get('integrity', {}).get('hash', '')
            
            # 2. Manipuloi hashia
            meta_data['integrity']['hash'] = 'sha256:fake_hash_1234567890'
            
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(meta_data, f, indent=2, ensure_ascii=False)
            
            # 3. Tarkista havaitaanko manipulaatio
            time.sleep(2)
            
            import requests
            response = requests.get('http://localhost:5000/api/data/verify', timeout=10)
            if response.status_code == 200:
                result = response.json()
                issues_found = result.get('integrity_check', {}).get('issues_found', 0)
                
                if issues_found > 0:
                    self.log_test(
                        "Hash-manipulaatio", 
                        True, 
                        "Hash-manipulaatio havaittu", 
                        f"L√∂ydetty {issues_found} ongelmaa"
                    )
                else:
                    self.log_test(
                        "Hash-manipulaatio", 
                        False, 
                        "Hash-manipulaatio EI havaittu", 
                        "V√§√§r√§ hash ei aiheuttanut h√§lytyst√§"
                    )
            else:
                self.log_test(
                    "Hash-manipulaatio", 
                    False, 
                    "API-virhe", 
                    f"Status code: {response.status_code}"
                )
            
            # 4. Palauta alkuper√§inen hash
            meta_data['integrity']['hash'] = original_hash
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(meta_data, f, indent=2, ensure_ascii=False)
                
        except Exception as e:
            self.log_test(
                "Hash-manipulaatio", 
                False, 
                "Testi ep√§onnistui", 
                str(e)
            )
    
    def test_5_data_integrity_api(self):
        """Testaa data integrity API:n toimivuutta"""
        print("üîì TESTI 5: Data Integrity API")
        
        try:
            import requests
            
            # Testaa eri API-endpointeja
            endpoints = [
                ('/api/data/status', 'Data status'),
                ('/api/data/verify', 'Data verify'),
                ('/api/data/files', 'Data files'),
                ('/api/version', 'Version info')
            ]
            
            all_success = True
            details = []
            
            for endpoint, name in endpoints:
                try:
                    response = requests.get(f'http://localhost:5000{endpoint}', timeout=10)
                    if response.status_code == 200:
                        details.append(f"{name}: ‚úÖ ({response.status_code})")
                    else:
                        details.append(f"{name}: ‚ùå ({response.status_code})")
                        all_success = False
                except Exception as e:
                    details.append(f"{name}: ‚ùå ({str(e)})")
                    all_success = False
            
            self.log_test(
                "Data Integrity API", 
                all_success, 
                "API-testit suoritettu", 
                ", ".join(details)
            )
            
        except Exception as e:
            self.log_test(
                "Data Integrity API", 
                False, 
                "Testi ep√§onnistui", 
                str(e)
            )
    
    def run_all_tests(self):
        """Suorita kaikki testit"""
        print("üöÄ K√ÑYNNISTET√Ñ√ÑN DATA INTEGRITY HY√ñKK√ÑYSTESTIT")
        print("=" * 60)
        print()
        
        # Tarkista ett√§ sovellus on k√§ynniss√§
        try:
            import requests
            response = requests.get('http://localhost:5000/api/status', timeout=5)
            if response.status_code != 200:
                print("‚ùå VASTAUS: Sovellus ei ole k√§ynniss√§ localhost:5000")
                print("   K√§ynnist√§ ensin: python web_app.py")
                return
        except:
            print("‚ùå VASTAUS: Sovellus ei ole k√§ynniss√§ localhost:5000")
            print("   K√§ynnist√§ ensin: python web_app.py")
            return
        
        print("‚úÖ Sovellus on k√§ynniss√§, aloitetaan testit...")
        print()
        
        # Suorita testit
        self.test_1_direct_file_modification()
        self.test_2_corrupt_json_file() 
        self.test_3_missing_file()
        self.test_4_hash_tampering()
        self.test_5_data_integrity_api()
        
        # Tulosta yhteenveto
        self.print_summary()
    
    def print_summary(self):
        """Tulosta testien yhteenveto"""
        print()
        print("=" * 60)
        print("üìä TESTIYHTEENVETO")
        print("=" * 60)
        
        successful_tests = sum(1 for test in self.test_results if test['success'])
        total_tests = len(self.test_results)
        
        print(f"Suoritettu testej√§: {total_tests}")
        print(f"Onnistuneita: {successful_tests}")
        print(f"Ep√§onnistuneita: {total_tests - successful_tests}")
        print()
        
        security_score = (successful_tests / total_tests) * 100 if total_tests > 0 else 0
        print(f"üîí TURVALLISUUSPISTEET: {security_score:.1f}%")
        
        if security_score >= 80:
            print("üéâ ERINOMAISTA! Data integrity -j√§rjestelm√§ toimii vahvasti.")
        elif security_score >= 60:
            print("‚ö†Ô∏è  HYV√Ñ, mutta parannettavaa viel√§.")
        else:
            print("üö® HEIKKO! Data integrity -j√§rjestelm√§ tarvitsee parannusta.")
        
        print()
        print("Yksityiskohdat:")
        for test in self.test_results:
            icon = "‚úÖ" if test['success'] else "‚ùå"
            print(f"  {icon} {test['test']}")

if __name__ == "__main__":
    tester = SecurityTester()
    tester.run_all_tests()
