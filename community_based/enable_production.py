#!/usr/bin/env python3
# enable_production.py
"""
Aktivoi tuotantotila - K√ÑYTT√ñ: python enable_production.py
"""

import sys
from pathlib import Path

def main():
    """P√§√§ohjelma tuotantotilan aktivointiin"""
    
    print("üéØ VAAILIJ√ÑRJESTELM√ÑN TUOTANTOTILAN AKTIVOINTI")
    print("=" * 60)
    
    try:
        # Tuo production lock manager
        from production_lock_manager import ProductionLockManager
        
        lock_manager = ProductionLockManager()
        
        # N√§yt√§ nykyinen tila
        status = lock_manager.get_lock_status()
        if status["locked"]:
            print(f"üîí J√§rjestelm√§ on JO LUKITTU tuotantotilaan")
            print(f"   Lukittu: {status['locked_at']}")
            print(f"   Fingerprint CID: {status['fingerprint_cid']}")
            print(f"   Moduuleja: {status['total_modules']}")
            print(f"   Vaali: {status['election_id']}")
            print("\nüí° J√§rjestelm√§ on jo turvallisuustilassa")
            return True
        else:
            print("üîì J√§rjestelm√§ on KEHITYSTILASSA")
            print("   - Fingerprint-tarkistuksia ei suoriteta")
            print("   - Ohjelmatiedostoja voi muokata vapaasti")
            print("   - Ei tuotantotason turvallisuutta")
        
        print("\n" + "=" * 60)
        print("üìã TUOTANTOTILAN EDUT:")
        print("   ‚úÖ Est√§√§ ohjelmatiedostojen muuttamisen")
        print("   ‚úÖ Varmistaa j√§rjestelm√§n eheyden")
        print("   ‚úÖ Lis√§√§ turvallisuutta tuotantok√§ytt√∂√∂n")
        print("   ‚úÖ Pakottaa versionhallinnan")
        print("")
        print("‚ö†Ô∏è  HUOMIO:")
        print("   - Et voi en√§√§ muokata ohjelmatiedostoja")
        print("   - Kaikki muutokset vaativat uuden fingerprintin")
        print("   - Testaa j√§rjestelm√§ ennen aktivointia")
        
        print("\n" + "=" * 60)
        
        # Kysy vahvistus
        response = input("Haluatko varmasti aktivoida tuotantotilan? (K/e): ").strip().lower()
        
        if response in ['', 'k', 'kyll√§', 'y', 'yes']:
            print("\nüîí AKTIVOIDAAN TUOTANTOTILA...")
            print("T√§m√§ voi kest√§√§ hetken...")
            
            success = lock_manager.enable_production_mode()
            
            if success:
                print("\nüéâ TUOTANTOTILA AKTIVOITU ONNISTUNEESTI!")
                print("=" * 50)
                print("üîê TURVALLISUUS TOIMINNOT AKTIVOITU:")
                print("   ‚úÖ Kaikki ohjelmat tarkistavat fingerprintit")
                print("   ‚úÖ J√§rjestelm√§n eheys varmistettu")
                print("   ‚úÖ IPFS-fingerprint tallennettu")
                print("   ‚úÖ Tuotantotasoinen turvallisuus")
                print("")
                print("üí° SEURAAVAT VAIHEET:")
                print("   1. Testaa kaikki ohjelmat uudelleenk√§ynnistyksell√§")
                print("   2. Varmista ett√§ IPFS-synkronointi toimii")
                print("   3. Aktivoi kysymysten l√§hetyksen lukitus")
                print("   4. K√§ynnist√§ vaalikone tuotantok√§ytt√∂√∂n")
                print("")
                print("üö® T√ÑRKE√Ñ√Ñ:")
                print("   - √Ñl√§ muokkaa ohjelmatiedostoja en√§√§!")
                print("   - Kaikki muutokset vaativat uuden version")
                print("   - K√§yt√§ versionhallintaa jatkokehitykseen")
                
                return True
            else:
                print("\n‚ùå TUOTANTOTILAN AKTIVOINTI EP√ÑONNISTUI")
                print("Tarkista virheilmoitus ja yrit√§ uudelleen")
                return False
        else:
            print("\nüîì Tuotantotilan aktivointi peruttu")
            print("J√§rjestelm√§ pysyy kehitystilassa")
            return True
            
    except ImportError as e:
        print(f"‚ùå TUOTANTOTILAN HALLINTA EI SAATAVILLA")
        print(f"   Virhe: {e}")
        print("")
        print("üí° RATKAISU:")
        print("   1. Toteuta production_lock_manager.py ensin")
        print("   2. Varmista ett√§ enhanced_integrity_manager.py on saatavilla")
        print("   3. Tarkista ett√§ kaikki riippuvuudet on asennettu")
        return False
    
    except Exception as e:
        print(f"‚ùå ODOTTAMATON VIRHE: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
