# Vaalijärjestelmän Käyttöohje

## Yleiskatsaus

Tämä dokumentti kattaa koko vaalijärjestelmän asennuksen, konfiguroinnin ja käytön. Järjestelmä koostuu modulaarisista komponenteista, jotka mahdollistavat joustavan vaalien hallinnan.

## 1. Järjestelmän Asennus

### Vaatimukset
- Python 3.8+
- IPFS (valinnainen, mock-IPFS sisältyy)

### Perusasennus

```bash
# 1. Lataa vaalikonfiguraatio ja listaa saatavilla olevat vaalit
python install.py --config-file=QmElectionsList123456789 --list-elections

# 2. Asenna presidentinvaalit ensimmäisenä koneena (master-kone)
python install.py --config-file=QmElectionsList123456789 --election-id=president_2024 --first-install

# 3. Asenna sama vaali toiselle koneelle (työasema)
python install.py --config-file=QmElectionsList123456789 --election-id=president_2024
```

### Asetusvaihtoehdot

| Vaihtoehto | Kuvaus | Esimerkki |
|------------|--------|-----------|
| `--config-file` | IPFS CID vaalilistalle | `--config-file=QmElectionsList123456789` |
| `--election-id` | Asennettavan vaalin ID | `--election-id=president_2024` |
| `--first-install` | Ensimmäinen asennus (master-kone) | `--first-install` |
| `--output-dir` | Asennushakemisto | `--output-dir=./my_election` |
| `--list-elections` | Listaa vaalit | `--list-elections` |
| `--verify` | Tarkista asennus | `--verify` |

### Asennuksen tarkistus

```bash
# Tarkista että asennus onnistui
python install.py --config-file=QmElectionsList123456789 --election-id=president_2024 --verify
```

## 2. IPFS Synkronointi

### Synkronointitilat

Järjestelmä tukee kolmea synkronointitilaa:

1. **Mock-only**: Vain testausympäristö (oletus)
2. **Hybrid**: Molemmat IPFS:t, mock ensin
3. **Real-only**: Vain oikea IPFS (tuotanto)

### Synkronointikomennot

```bash
# Näytä nykyinen tila
python ipfs_sync_manager.py status

# Ota hybrid-synkronointi käyttöön
python ipfs_sync_manager.py enable --mode=hybrid

# Synkronoi kaikki data mock -> real
python ipfs_sync_manager.py sync-all

# Siirry täysin oikeaan IPFS:ään
python ipfs_sync_manager.py migrate

# Testaa IPFS-yhteydet
python ipfs_sync_manager.py test

# Poista synkronointi käytöstä
python ipfs_sync_manager.py disable
```

### Oikean IPFS:n asennus

```bash
# 1. Asenna IPFS
# Ubuntu/Debian:
sudo apt install ipfs

# Tai käytä dockeria:
docker run -d --name ipfs-host -v ipfs-data:/data/ipfs -p 4001:4001 -p 5001:5001 -p 8080:8080 ipfs/kubo:latest

# 2. Alusta IPFS
ipfs init

# 3. Käynnistä daemon
ipfs daemon &

# 4. Asenna Python-client
pip install ipfshttpclient
```

## 3. Kysymysten Hallinta

### Uuden kysymyksen lisääminen

```python
from sync_manager import SyncManager

# Alusta synkronointimanageri
manager = SyncManager()

# Lisää uusi kysymys
question_data = {
    "category": {
        "fi": "Ympäristö",
        "en": "Environment", 
        "sv": "Miljö"
    },
    "question": {
        "fi": "Pitäisikö kaupungin investoida enemmän pyöräteihin?",
        "en": "Should the city invest more in bicycle paths?",
        "sv": "Bör staden investera mer i cykelvägar?"
    },
    "tags": ["transport", "environment"],
    "scale": {"min": -5, "max": 5}
}

question_id = manager.add_new_question(question_data)
```

### Kysymysten synkronointi

```python
# Synkronoi uudet kysymykset IPFS:ään
sync_results = manager.full_sync_cycle()

# Manuaalinen synkronointi
manager.sync_local_to_ipfs()
manager.sync_ipfs_to_local()
```

### Kysymysten ELO-luokitus

Järjestelmä käyttää kahta delta-arvoa:
- **comparison_delta**: Pareittaisista vertailuista (-900 max)
- **vote_delta**: Yksinkertaisista äänistä (-1000 max)

Kysymys blokataan automaattisesti kun:
```
1000 + comparison_delta + vote_delta ≤ 0
JA comparison_delta < 0 JA vote_delta < 0
```

## 4. Ehdokkaiden Hallinta

### Ehdokkaan lisääminen

```python
from candidate_manager import CandidateManager

manager = CandidateManager()

# Lisää uusi ehdokas
candidate_data = {
    "basic_info": {
        "name": {
            "fi": "Matti Meikäläinen",
            "en": "Matti Meikalainen",
            "sv": "Matti Meikalainen"
        },
        "party": "green_party",
        "district": "helsinki",
        "photo_url": "https://example.com/photo.jpg",
        "contact_info": {
            "email": "matti@example.com",
            "website": "https://matti.example.com"
        }
    }
}

candidate_id = manager.add_candidate(candidate_data)
```

### Vastausten lisääminen

```python
# Lisää vastaus ehdokkaalle
answer_data = {
    "question_id": 1,
    "answer_value": 4,  # -5 to +5
    "explanation": {
        "fi": "Polkupyöräily on tärkeä osa kestävää liikennettä",
        "en": "Cycling is an important part of sustainable transport",
        "sv": "Cykling är en viktig del av hållbar transport"
    },
    "confidence": 4  # 1-5
}

manager.add_candidate_answer(candidate_id, answer_data)
```

## 5. Tiedostorakenne

### Perustiedostot

```
runtime/
├── base_templates/          # Alkuperäiset mallit
│   ├── install_config.base.json
│   ├── meta.base.json
│   └── ...
├── questions.json           # Pääkysymyskanta
├── new_questions.json       # Odottavat kysymykset
├── ipfs_questions.json      # IPFS-mirror
├── candidates.json          # Ehdokkaat
├── candidate_profiles.json  # Ehdokkaiden profiilit
├── system_metadata.json     # Koneen metadata
├── system_chain.json        # Muutoshistoria
└── installation_meta.json   # Asennustiedot
```

### Metadata-tiedostot

- **system_metadata.json**: Koneen yksilöllinen ID ja asennustiedot
- **election_registry.json**: Vaalikohtaiset rekisteritiedot
- **ipfs_sync_status.json**: Synkronointitila

## 6. Konfiguraatiotiedostot

### Vaalilista (elections_list.json)

```json
{
  "elections": [
    {
      "election_id": "president_2024",
      "name": {
        "fi": "Presidentinvaalit 2024",
        "en": "Presidential Election 2024",
        "sv": "Presidentvalet 2024"
      },
      "dates": [
        {
          "phase": 1,
          "date": "2024-01-28",
          "description": {
            "fi": "Ensimmäinen vaalipäivä",
            "en": "First election day",
            "sv": "Första valdagen"
          }
        }
      ],
      "type": "presidential",
      "timelock_enabled": true,
      "edit_deadline": "2024-01-20",
      "grace_period_hours": 48,
      "config_cid": "QmPresidentConfig2024"
    }
  ]
}
```

### Asennuskonfiguraatio (install_config.base.json)

```json
{
  "election_data": {
    "id": "president_2024",
    "name": {
      "fi": "Presidentinvaalit 2024",
      "en": "Presidential Election 2024",
      "sv": "Presidentvalet 2024"
    },
    "date": "2024-01-28",
    "type": "presidential",
    "timelock_enabled": true,
    "edit_deadline": "2024-01-20",
    "grace_period_hours": 48
  },
  "system_metadata": {
    "machine_id": "machine_abc123",
    "first_install": true,
    "installed_at": "2024-01-15T10:00:00Z"
  }
}
```

## 7. Komentorivityökalut

### Testausskriptit

```bash
# Testaa koko asennusprosessi
python test_modular_installation.py

# Testaa IPFS-synkronointi
python test_ipfs_sync.py

# Testaa metadata-hallinta
python test_metadata_manager.py
```

### Kehitystyökalut

```bash
# Generoi testidataa
python generate_test_data.py

# Tarkista data-eheys
python validate_data.py

# Näytä järjestelmän tilastot
python system_stats.py
```

## 8. Vianetsintä

### Yleisimmät ongelmat

**Asennus epäonnistuu:**
```bash
# Tarkista Python-riippuvuudet
pip install -r requirements.txt

# Tarkista IPFS-yhteys
python ipfs_sync_manager.py test

# Tarkista tiedosto-oikeudet
chmod +x *.py
```

**Synkronointi ei toimi:**
```bash
# Tarkista synkronointitila
python ipfs_sync_manager.py status

# Pakota uudelleensynkronointi
python ipfs_sync_manager.py sync-all

# Tarkista mock-datat
ls -la mock_ipfs_data.json
```

**Kone-ID ongelmat:**
```bash
# Tarkista koneen metadata
python install.py --config-file=QmElectionsList123456789 --election-id=president_2024 --verify

# Poista ja asenna uudelleen
rm runtime/system_metadata.json
python install.py --config-file=QmElectionsList123456789 --election-id=president_2024
```

### Lokitiedostot

- `mock_ipfs_data.json` - Mock-IPFS datat
- `ipfs_sync_status.json` - Synkronointitila
- `system_chain.json` - Muutoshistoria
- `sync_conflicts.json` - Synkronointikonfliktit

## 9. Tuotantokäyttö

### Master-koneen asetukset

1. Asenna ensimmäisenä `--first-install` lipulla
2. Varmuuskopioi `system_metadata.json`
3. Ota IPFS-synkronointi käyttöön hybrid-tilassa
4. Synkronoi data oikeaan IPFS:ään

### Työasemien asetukset

1. Asenna ilman `--first-install` lippua
2. Synkronoi data master-koneelta
3. Käytä hybrid-tilaa datan jakamiseen

### Aikarajat ja deadlinet

- **Edit deadline**: Viimeinen päivä muokata kysymyksiä
- **Grace period**: Äänestyksen jälkeinen aika ennen tulosten julkituloa
- **Timelock**: Automaattinen tulosten lukitus

## 10. Tietoturva

### Koneen identiteetti

- Jokaisella koneella on yksilöllinen machine_id
- Master-kone allekirjoittaa vaalikohtaiset konfiguraatiot
- Kaikki muutokset lokitetaan system_chain.json:ään

### Data-eheys

- Kaikki tiedostot hashataan ennen IPFS-lähetystä
- Synkronointikonfliktit tallennetaan erikseen
- Vanhat versiot säilyvät IPFS:ässä CID:ien kautta

### Pääsynhallinta

- Vaalikohtaiset koneet allekirjoitettu vaali-ID:llä
- Master-kone hallitsee lisäkoneiden liittymistä
- Kaikki muutokset vaativat synkronoinnin

---

## Pika-aloitus

```bash
# 1. Lataa ja asenna
python install.py --config-file=QmElectionsList123456789 --list-elections
python install.py --config-file=QmElectionsList123456789 --election-id=president_2024 --first-install

# 2. Testaa
python install.py --config-file=QmElectionsList123456789 --election-id=president_2024 --verify

# 3. Synkronoi
python ipfs_sync_manager.py enable --mode=hybrid
python ipfs_sync_manager.py sync-all

# 4. Käytä
python manage_questions.py --add --category "Testi" --question "Testikysymys?"
```

Tämä dokumentti kattaa kaikki tärkeimmät toiminnot. Tarkemmat ohjeet kuhunkin moduuliin löytyy komentorivin `--help` lipuista.
